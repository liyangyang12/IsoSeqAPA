#!/usr/bin/env python
import sys,time,argparse

def main(args):
	sys.stdout.write("Start analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()
	stat_apa(args.input,args.output,args.lr,args.end)
	sys.stdout.write("Finish analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()


def stat_apa(input_con_gpd,output_apa_gpd,min_lr,min_sr):
	for line in input_con_gpd:
		grp_pa_set = line.strip().split("\t")[-1]
		if grp_pa_set == "NA":
			print >>output_apa_gpd, "\t".join([line.strip(),"NA","NA"])
		else:
			grp_pa_pass_list = []
			for grp_pa in grp_pa_set.split(","):
				lr_c = int(grp_pa.split("_")[1])
				sr_c = int(grp_pa.split("_")[2])
				if lr_c >= min_lr and sr_c >= min_sr:
					grp_pa_pass_list.append(grp_pa)
			if grp_pa_pass_list == []:
				print >>output_apa_gpd, "\t".join([line.strip(),"-","0"])
			else:
				print >>output_apa_gpd, "\t".join([line.strip(),",".join(grp_pa_pass_list),str(len(grp_pa_pass_list))])

	input_con_gpd.close()
	output_apa_gpd.close()

def do_inputs():
	output_gpd_format = '''
1. gene id
2. isoform id
3. chromosome id
4. strand
5. TSS (+)
6. TTS (+)
7. number of support full-length long reads
8. number of support total long reads
9. exon count
10. exon start set
11. exon end set
12. For novel isoform, derived genic locus
13. For novel isoform, overlap percentage with derived genic locus
14. For novel singleton isoform, if it is located at the last exon of any known isoform. If yes, isoform ID otherwise '-'
15. For novel singleton isoform, the overlap percentage with the the last exon
16. For novel multi-exon isoform, number of splice sites are detected by anno and/or short reads; and the total number of splice sites
17. For novel multi-exon isoform, if the multi-exon isoform is the subset (based on splice junction combination) of known multi-exon isoform, isoform ID if yes otherwise '-'
18. For novel isoform, maximal length of polyA track in defined region
19. For novel isoform, maximal percentage of nucleotide A in defined region
20. Individual polyA site information: polyA site postion; number of supporting long reads; number of supporting 3End-Seq position
21. Grouped polyA site information: polyA site postion; number of supporting long reads; number of supporting 3End-Seq position
22. Grouped polyA site information passing the criteria (supporting long reads and 3End-Seq data): polyA site postion; number of supporting long reads; number of supporting 3End-Seq position
23. Number of polyA sites passing the criteria (supporting long reads and 3End-Seq data)'''

	parser = argparse.ArgumentParser(description="Function: generate final output file (gpd format)",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i','--input',type=argparse.FileType('r'),required=True,help="Input: constructed isoform with polyA information (GPD file) generated by 'py_isoseqapa_generate_apa_output.py'")
	parser.add_argument('-l','--lr',type=int,default=1,help="Minimal number of supporting long reads")
	parser.add_argument('-3','--end',type=int,default=0,help="Minimal level of supporting 3End-Seq data ('0' means no 3End-Seq data support)")
	parser.add_argument('-o','--output',type=argparse.FileType('w'),required=True,help="Output: constructed isoform with polyA stat information (GPD file)")
	args = parser.parse_args()
	return args

if __name__=="__main__":
	args = do_inputs()
	main(args)
