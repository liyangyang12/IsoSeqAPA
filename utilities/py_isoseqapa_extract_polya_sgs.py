#!/usr/bin/env python
import sys,re,time,argparse
from multiprocessing import cpu_count,Pool

def main(args):
	sys.stdout.write("Start analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()
	dic_chr_strand_pa = parse_genome_size(args.genome)
	extract_polya(args.input,args.output,args.polya_len,args.polya_pct,dic_chr_strand_pa)
	sys.stdout.write("Finish analysis: " + time.strftime("%a,%d %b %Y %H:%M:%S") + "\n")
	sys.stdout.flush()

def parse_genome_size(input_genome):
	dic_chr_strand_pa = {}
	for line in input_genome:
		if line.startswith(">"):
			chr = line.strip().split()[0][1:]
			dic_chr_strand_pa[chr+"&+"] = {}
			dic_chr_strand_pa[chr+"&-"] = {}
	input_genome.close()
	return dic_chr_strand_pa

def extract_polya(input_gpd,output_txt,min_pa_len,min_pa_pct,dic_chr_strand_pa):
	for line in input_gpd:
		qname,qname,chr,strand,tss,tts,mapq,sf,exon_number,exon_start_set,exon_end_set,flag,seq = line.strip().split("\t")[:13]
		if strand == "+" and int(sf.split("_")[1]) >= min_pa_len: # plus strand
			sf_n = int(sf.split("_")[1])
			sf_seq = seq[-sf_n:]
			if float(sf_seq.count("A"))/float(sf_n) >= min_pa_pct:
				if tts not in dic_chr_strand_pa[chr+"&"+strand].keys():
					dic_chr_strand_pa[chr+"&"+strand][tts] = 1
				else:
					dic_chr_strand_pa[chr+"&"+strand][tts] += 1
		elif strand == "-" and int(sf.split("_")[0]) >= min_pa_len: # minus strand
			sf_n = int(sf.split("_")[0])
			sf_seq = seq[:sf_n]
			if float(sf_seq.count("T"))/float(sf_n) >= min_pa_pct:
				if str(int(tss)+1) not in dic_chr_strand_pa[chr+"&"+strand].keys():
					dic_chr_strand_pa[chr+"&"+strand][str(int(tss)+1)] = 1
				else:
					dic_chr_strand_pa[chr+"&"+strand][str(int(tss)+1)] += 1
		else:
			pass

	for chr_strand in dic_chr_strand_pa.keys():
		for pa in dic_chr_strand_pa[chr_strand].keys():
			print >>output_txt, "\t".join([chr_strand.split("&")[0],chr_strand.split("&")[1],pa,str(dic_chr_strand_pa[chr_strand][pa])])

def do_inputs():
	output_txt_format = '''
1. chr
2. strand
3. polyA pos
4. supporting short reads'''

	parser = argparse.ArgumentParser(description="Function: extract polyA information from short read gpd file.",formatter_class=argparse.ArgumentDefaultsHelpFormatter)
	parser.add_argument('-i','--input',type=argparse.FileType('r'),required=True,help="Input: gpd file generated by 'py_isoseqapa_sam2gpd_sgs.py'")
	parser.add_argument('-g','--genome',type=argparse.FileType('r'),required=True,help="Input: reference genome fasta file'")
	parser.add_argument('-o','--output',type=argparse.FileType('w'),required=True,help="Output: txt file")
	parser.add_argument('--polya_len',type=int,default=5,help="Minimal length of polyA tail on reads")
	parser.add_argument('--polya_pct',type=float,default=0.8,help="Minimal percentage of A nucleotide on polyA tail")
	args = parser.parse_args()
	return args

if __name__=="__main__":
	args = do_inputs()
	main(args)
